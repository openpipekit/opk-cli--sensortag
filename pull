#!/usr/bin/env node


var log = function(message, tokens) {
  if (program.verbose) {
    console.log(message, tokens)
  }
}

var _ = require('underscore')
var util = require('util');
var async = require('async');
var SensorTag = require('sensortag');

var data = {}

var program = parseArgv(process.argv)
log(program)

if (program.help) {
  console.log('usage:')
  console.log('./pull')
  //console.log('./pull --ambientTemperature')
  //console.log('./pull --humidity --gyroscope --ambientTemperature')
  process.exit(1)
}

program.allSensors = true

var USE_READ = true;

SensorTag.discover(function(sensorTag) {
  log('discovered: ' + sensorTag);

  sensorTag.on('disconnect', function() {
    log('disconnected!');
    process.exit(0);
  });

  async.series([
      function(callback) {
        log('connectAndSetUp');
        sensorTag.connectAndSetUp(callback);
      },
      function(callback) {
        log('readDeviceName');
        sensorTag.readDeviceName(function(error, deviceName) {
          log('\tdevice name = ' + deviceName);
          callback();
        });
      },
      function(callback) {
        log('readSystemId');
        sensorTag.readSystemId(function(error, systemId) {
          log('\tsystem id = ' + systemId);
          callback();
        });
      },
      function(callback) {
        log('readSerialNumber');
        sensorTag.readSerialNumber(function(error, serialNumber) {
          log('\tserial number = ' + serialNumber);
          callback();
        });
      },
      function(callback) {
        log('readFirmwareRevision');
        sensorTag.readFirmwareRevision(function(error, firmwareRevision) {
          log('\tfirmware revision = ' + firmwareRevision);
          callback();
        });
      },
      function(callback) {
        log('readHardwareRevision');
        sensorTag.readHardwareRevision(function(error, hardwareRevision) {
          log('\thardware revision = ' + hardwareRevision);
          callback();
        });
      },
      function(callback) {
        log('readSoftwareRevision');
        sensorTag.readHardwareRevision(function(error, softwareRevision) {
          log('\tsoftware revision = ' + softwareRevision);
          callback();
        });
      },
      function(callback) {
        log('readManufacturerName');
        sensorTag.readManufacturerName(function(error, manufacturerName) {
          log('\tmanufacturer name = ' + manufacturerName);
          callback();
        });
      },
      function(callback) {
        if (program.objectTemperature || program.ambientTemperature || program.allSensors) {
          log('enableIrTemperature');
          sensorTag.enableIrTemperature(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.objectTemperature || program.ambientTemperature || program.allSensors) {
          setTimeout(callback, 2000);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.objectTemperature || program.ambientTemperature || program.allSensors) {
          log('readIrTemperature');
          sensorTag.readIrTemperature(function(error, objectTemperature, ambientTemperature) {
            if (program.objectTemperature || program.allSensors) {
              data.objectTemperature = objectTemperature.toFixed(1)
              log('\tobject temperature = %d °C', objectTemperature.toFixed(1));
            }
            if (program.ambientTemperature || program.allSensors) {
              data.ambientTemperature = ambientTemperature.toFixed(1)
              log('\tambient temperature = %d °C', ambientTemperature.toFixed(1));
            }
            callback();
          });
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.objectTemperature || program.ambientTemperature || program.allSensors) {
          log('disableIrTemperature');
          sensorTag.disableIrTemperature(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.accelerometer || program.allSensors) {
          log('enableAccelerometer');
          sensorTag.enableAccelerometer(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.accelerometer || program.allSensors) {
          setTimeout(callback, 2000);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.accelerometer || program.allSensors) {
          log('readAccelerometer');
          sensorTag.readAccelerometer(function(error, x, y, z) {
            data.accelerometer_x = x.toFixed(1)
            data.accelerometer_y = y.toFixed(1)
            data.accelerometer_z = z.toFixed(1)
            log('\tx = %d G', x.toFixed(1));
            log('\ty = %d G', y.toFixed(1));
            log('\tz = %d G', z.toFixed(1));
            callback();
          });
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.accelerometer || program.allSensors) {
          log('disableAccelerometer');
          sensorTag.disableAccelerometer(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.humidity || program.allSensors) {
          log('enableHumidity');
          sensorTag.enableHumidity(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.humidity || program.allSensors) {
          setTimeout(callback, 2000);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.humidity || program.allSensors) {
          log('readHumidity');
          sensorTag.readHumidity(function(error, temperature, humidity) {
            data.humidityTemperature = temperature.toFixed(1)
            data.humidityHumidity = humidity.toFixed(1)
            log('\ttemperature = %d °C', temperature.toFixed(1));
            log('\thumidity = %d %', humidity.toFixed(1));
            callback();
          });
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.humidity || program.allSensors) {
          log('disableHumidity');
          sensorTag.disableHumidity(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.magnetometer || program.allSensors) {
          log('enableMagnetometer');
          sensorTag.enableMagnetometer(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.magnetometer || program.allSensors) {
          setTimeout(callback, 2000);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.magnetometer || program.allSensors) {
          log('readMagnetometer');
          sensorTag.readMagnetometer(function(error, x, y, z) {
            data.magnetometer_x = x.toFixed(1)
            data.magnetometer_y = y.toFixed(1)
            data.magnetometer_z = z.toFixed(1)
            log('\tx = %d μT', x.toFixed(1));
            log('\ty = %d μT', y.toFixed(1));
            log('\tz = %d μT', z.toFixed(1));
            callback();
          });
        } else {
          callback()
        }
      },
      function(callback) {
        if (program.magnetometer || program.allSensors) {
          log('disableMagnetometer');
          sensorTag.disableMagnetometer(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.barometricPressure || program.allSensors) {
          log('enableBarometricPressure');
          sensorTag.enableBarometricPressure(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.barometricPressure || program.allSensors) {
          setTimeout(callback, 2000);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.barometricPressure || program.allSensors) {
          log('readBarometricPressure');
          sensorTag.readBarometricPressure(function(error, pressure) {
            data.barometricPressure = pressure.toFixed(1)
            log('\tpressure = %d mBar', pressure.toFixed(1));
            callback();
          });
        } else {
          callback()
        }
      },
      function(callback) {
        if (program.barometricPressure || program.allSensors) {
          log('disableBarometricPressure');
          sensorTag.disableBarometricPressure(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.gyroscope || program.allSensors) {
          log('enableGyroscope');
          sensorTag.enableGyroscope(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.gyroscope || program.allSensors) {
          setTimeout(callback, 2000);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (program.gyroscope || program.allSensors) {
          log('readGyroscope');
          sensorTag.readGyroscope(function(error, x, y, z) {
            data.gyroscope_x = x.toFixed(1)
            data.gyroscope_y = y.toFixed(1)
            data.gyroscope_z = z.toFixed(1)
            log('\tx = %d °/s', x.toFixed(1));
            log('\ty = %d °/s', y.toFixed(1));
            log('\tz = %d °/s', z.toFixed(1));
            callback();
          });
        } else {
          callback()
        }
      },
      function(callback) {
        if (program.gyroscope || program.allSensors) {
          log('disableGyroscope');
          sensorTag.disableGyroscope(callback);
        }
        else {
          callback()
        }
      },
      function(callback) {
        if (sensorTag.type === 'cc2540') {
          async.series([
            function(callback) {
              log('readTestData');
              sensorTag.readTestData(function(error, data) {
                log('\tdata = ' + data);

                callback();
              });
            },
            function(callback) {
              log('readTestConfiguration');
              sensorTag.readTestConfiguration(function(error, configuration) {
                log('\tconfiguration = ' + configuration);

                callback();
              });
            },
            function() {
              callback();
            }
          ]);
        } else if (sensorTag.type === 'cc2650') {
          async.series([
            function(callback) {
              log('enableLuxometer');
              sensorTag.enableLuxometer(callback);
            },
            function(callback) {
              setTimeout(callback, 2000);
            },
            function(callback) {
              if (USE_READ) {
                log('readLuxometer');
                sensorTag.readLuxometer(function(error, lux) {
                  log('\tlux = %d', lux.toFixed(1));

                  callback();
                });
              } else {
                sensorTag.on('luxometerChange', function(lux) {
                  log('\tlux = %d', lux.toFixed(1));
                });

                log('setLuxometer');
                sensorTag.setLuxometerPeriod(500, function(error) {
                  log('notifyLuxometer');
                  sensorTag.notifyLuxometer(function(error) {
                    setTimeout(function() {
                      log('unnotifyLuxometer');
                      sensorTag.unnotifyLuxometer(callback);
                    }, 5000);
                  });
                });
              }
            },
            function(callback) {
              log('disableLuxometer');
              sensorTag.disableLuxometer(callback);
            },
            function() {
              callback();
            }
          ]);
        } else {
          callback();
        }
      },
      function(callback) {
        log('DATA: ')
        var keys = _.keys(data)
        if (keys.length == 1) {
          console.log(data[keys[0]])
        }
        else {
          console.log(JSON.stringify(data))
        }
        log('disconnect');
        sensorTag.disconnect(callback);
      }
    ]
  );
});

// This is the standard function for parsing process.argv. It will return
// an object that where `--argumentName` is a property name and the
// proceding argument is the value. If there is no proceeding value then
// it will be interpreted as a boolean true.
function parseArgv(argv) {
  program = {}
  argv.forEach(function(arg, i) {
    if (arg.substr(0, 2) == '--') {
      paramName = arg.substr(2, arg.length)
      nextArg = argv[i+1]
      if ((typeof nextArg == 'string' && nextArg.substr(0, 2) == '--') || nextArg == undefined) {
        program[paramName] = true
      }
      else {
        program[paramName] = nextArg
      }
    }
  })
  return program
}
