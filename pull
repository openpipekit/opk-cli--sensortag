#!/usr/bin/env node

var util = require('util');

var async = require('async');

var SensorTag = require('sensortag');

var USE_READ = true;


SensorTag.discover(function(sensorTag) {
  //console.log('discovered: ' + sensorTag);

  sensorTag.on('disconnect', function() {
    //console.log('disconnected!');
    process.exit(0);
  });

  async.series([
      function(callback) {
        //console.log('connectAndSetUp');
        sensorTag.connectAndSetUp(callback);
      },
      function(callback) {
        //console.log('enableIrTemperature');
        sensorTag.enableIrTemperature(callback);
      },
      function(callback) {
        setTimeout(callback, 2000);
      },
      function(callback) {
        if (USE_READ) {
          //console.log('readIrTemperature');
          sensorTag.readIrTemperature(function(error, objectTemperature, ambientTemperature) {
            //console.log('\tobject temperature = %d 째C', objectTemperature.toFixed(1));
            //console.log('\tambient temperature = %d 째C', ambientTemperature.toFixed(1));
            console.log('%d', ambientTemperature.toFixed(1));

            callback();
          });
        } else {
          sensorTag.on('irTemperatureChange', function(objectTemperature, ambientTemperature) {
            console.log('\tobject temperature = %d 째C', objectTemperature.toFixed(1));
            console.log('\tambient temperature = %d 째C', ambientTemperature.toFixed(1))
          });

          console.log('setIrTemperaturePeriod');
          sensorTag.setIrTemperaturePeriod(500, function(error) {
            console.log('notifyIrTemperature');
            sensorTag.notifyIrTemperature(function(error) {
              setTimeout(function() {
                console.log('unnotifyIrTemperature');
                sensorTag.unnotifyIrTemperature(callback);
              }, 5000);
            });
          });
        }
      },
      function(callback) {
        //console.log('disconnect');
        sensorTag.disconnect(callback);
      }
  ])
})
